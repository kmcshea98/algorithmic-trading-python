# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UEDRpzpg1SVftLkjljMP3C9R_VIXfMFc
"""

import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

# Loading the data
from google.colab import files
uploaded = files.upload()

#Store the data into a df
df = pd.read_csv('TSLA.csv')
#Set the date to be the index
df = df.set_index(pd.DatetimeIndex(df['Date'].values))
#Show data
df

#Visualize the above data
plt.figure(figsize=(12.2, 4.5))
plt.plot(df['Close'], label='Close')
plt.xticks(rotation=45)
plt.title('CLose Price History')
plt.xlabel('Date')
plt.ylabel('Price USD ($)')
plt.show()

#Calculate the MACD and signal line indicators
#Calculate the EMA - Short-Term Exponential Moving Average
ShortEMA = df.Close.ewm(span=12, adjust=False).mean()
#Note: Span is twelve due to short term is typically twelve periods
LongEMA = df.Close.ewm(span=26, adjust=False).mean()
#Note: Span is twenty-six due to long term is typically twenty-six periods
MACD = ShortEMA - LongEMA
Signal = MACD.ewm(span=9, adjust= False).mean()

#Plot the chart with calculated data
plt.figure(figsize=(12.2, 4.5))
plt.plot(df.index, MACD, label = 'TSLA MACD', color = 'red')
plt.plot(df.index, Signal, label = 'Signal Line', color = 'blue')
plt.xticks(rotation = 45)
plt.legend(loc = 'upper left')
plt.show()

#Create new columns for extracted data
df['MACD'] = MACD
df['Signal Line'] = Signal
#Show data
df

#Create function to signal whether to buy or sell assets
def buy_sell(Signal):
  Buy = []
  Sell = []
  flag = -1
  for i in range (0, len(Signal)):
    if Signal['MACD'][i] > Signal['Signal Line'][i]:
      Sell.append(np.nan)
      if flag != 1:
        Buy.append(Signal['Close'][i])
        flag = 1
      else:
        Buy.append(np.nan)
    elif Signal['MACD'][i] < Signal['Signal Line'][i]:
      Buy.append(np.nan)
      if flag != 0:
        Sell.append(Signal['Close'][i])
        flag = 0
      else:
        Sell.append(np.nan)
    else:
      Buy.append(np.nan)
      Sell.append(np.nan)
  
  return (Buy, Sell)

#Create columns for buy and sell
j = buy_sell(df)
df['Buy Signal Price'] = j[0]
df['Sell Signal Price'] = j[1]

#Display data
df

plt.figure(figsize=(12.2, 4.5))
plt.scatter(df.index, df['Buy Signal Price'], color='yellow', label='Buy', marker='^', alpha=1)
plt.scatter(df.index, df['Sell Signal Price'], color='green', label='Sell', marker='v', alpha=1)
plt.plot(df['Close'], label='Close Price', alpha=0.35)
plt.xticks(rotation = 45)
plt.title('Close Price Buy & Sell Signals')
plt.xlabel('Date')
plt.ylabel('Close Price USD ($)')
plt.legend(loc = 'upper left')
plt.show()